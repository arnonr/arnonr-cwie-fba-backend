//ENUM
states: {
    type: DataTypes.ENUM,
    values: ['active', 'pending', 'deleted']
 }


// Reference
references: {
  // This is a reference to another model
  model: Bar,

  // This is the column name of the referenced model
  key: 'id',

  // With PostgreSQL, it is optionally possible to declare when to check the foreign key constraint, passing the Deferrable type.
  deferrable: Deferrable.INITIALLY_IMMEDIATE
  // Options:
  // - `Deferrable.INITIALLY_IMMEDIATE` - Immediately check the foreign key constraints
  // - `Deferrable.INITIALLY_DEFERRED` - Defer all foreign key constraint check to the end of a transaction
  // - `Deferrable.NOT` - Don't defer the checks at all (default) - This won't allow you to dynamically change the rule in a transaction
}


// join (JS)
[this.firstname, this.lastname].join(' ');

ควรใช้ build แทน new ถ้า Model ใช้ class
const jane = User.build({ name: "Jane" });
await jane.save();

// ใช้ update หลาย ฟิลด์พร้อมกัน
jane.set({
  name: "Ada",
  favoriteColor: "blue"
});

await jane.save();

// save บางฟิลด์
await jane.save({ fields: ['name'] });

// increment
const jane = await User.create({ name: "Jane", age: 100, cash: 5000 });
await jane.increment({
  'age': 2,
  'cash': 100
});

// If the values are incremented by the same amount, you can use this other syntax as well:
await jane.increment(['age', 'cash'], { by: 2 });

// insert สามารถใชั create ได้ คือการ build+save
const jane = await User.create({ firstName: "Jane", lastName: "Doe" });

// ถ้าต้องการรวม
attributes: [
    'foo',
    [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats'],
    'bar'
  ]

// เขียนแบบสั้น จะได้ไม่ต้องพิมพ์ทุกฟิลด์
attributes: {
    include: [
      [sequelize.fn('COUNT', sequelize.col('hats')), 'n_hats']
    ]
  }


// เอาฟิลด์ฺออก
  attributes: { exclude: ['baz'] }

  // ใน where 
    // Using dialect specific column identifiers (PG in the following example):
      [Op.col]: 'user.organization_id',        // = "user"."organization_id"



[Op.like]: '%hat',                       // LIKE '%hat'
[Op.notLike]: '%hat',                    // NOT LIKE '%hat'
[Op.startsWith]: 'hat',                  // LIKE 'hat%'
[Op.endsWith]: 'hat',                    // LIKE '%hat'
[Op.substring]: 'hat',                   // LIKE '%hat%'
[Op.iLike]: '%hat',                      // ILIKE '%hat' (case insensitive) (PG only)
[Op.notILike]: '%hat',                   // NOT ILIKE '%hat'  (PG only)
[Op.regexp]: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (MySQL/PG only)
[Op.notRegexp]: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (MySQL/PG only)
[Op.iRegexp]: '^[h|a|t]',                // ~* '^[h|a|t]' (PG only)
[Op.notIRegexp]: '^[h|a|t]',             // !~* '^[h|a|t]' (PG only)



// advanced query
Post.findAll({
  where: sequelize.where(sequelize.fn('char_length', sequelize.col('content')), {[Op.gt]: 10})
});

// create หลาย record
const captains = await Captain.bulkCreate([
  { name: 'Jack Sparrow' },
  { name: 'Davy Jones' }
], { validate: true });

// เหมือนจะ sort จาก function ได้
[sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],
// will return otherfunction(awesomefunction(`col`)) DESC, This nesting is potentially infinite!
[sequelize.fn('otherfunction', sequelize.fn('awesomefunction', sequelize.col('col'))), 'DESC']


// scoped ใช้จำกัด การแสดงผลข้อมูลตามสิทธิ์ได้ และใช้ isremove ได้
Project.init({
  // Attributes
}, {
  defaultScope: {
    where: {
      active: true
    }
  },
  scopes: {
    deleted: {
      where: {
        deleted: true
      }
    },
    activeUsers: {
      include: [
        { model: User, where: { active: true } }
      ]
    },
    random() {
      return {
        where: {
          someNumber: Math.random()
        }
      }
    },
    accessLevel(value) {
      return {
        where: {
          accessLevel: {
            [Op.gte]: value
          }
        }
      }
    },
    sequelize,
    modelName: 'project'
  }
});

await Project.scope('deleted').findAll();
await Project.scope('random', { method: ['accessLevel', 19] }).findAll();


// addscope ทีหลังที่ service ได้
YourModel.addScope('scope1', {
  where: {
    firstName: 'bob',
    age: {
      [Op.gt]: 20
    }
  },
  limit: 2
});

// addscope ตาราง join ได้
Foo.addScope('limitedBars', {
  include: [{
    model: Bar,
    limit: 2
  }]
});

// เขียน Sql sub query
Post.findAll({
    attributes: {
        include: [
            [
                // Note the wrapping parentheses in the call below!
                sequelize.literal(`(
                    SELECT COUNT(*)
                    FROM reactions AS reaction
                    WHERE
                        reaction.postId = post.id
                        AND
                        reaction.type = "Laugh"
                )`),
                'laughReactionsCount'
            ]
        ]
    }
});


// getter
get() {
  const rawValue = this.getDataValue('username');
  return rawValue ? rawValue.toUpperCase() : null;
}

// เหมือนจะใช้ที่ service ได้ด้วย ไม่ต้อง toJson
user.getDataValue('username')


// setter
password: {
    type: DataTypes.STRING,
    set(value) {
      // Storing passwords in plaintext in the database is terrible.
      // Hashing the value with an appropriate cryptographic hash function is better.
      this.setDataValue('password', hash(value));
    }
  }


  //virtual fields
  fullName: {
    type: DataTypes.VIRTUAL,
    get() {
      return `${this.firstName} ${this.lastName}`;
    },
    set(value) {
      throw new Error('Do not try to set the `fullName` value!');
    }
  }

  //validate
  validate: {
      is: /^[a-z]+$/i,          // matches this RegExp
      is: ["^[a-z]+$",'i'],     // same as above, but constructing the RegExp from a string
      not: /^[a-z]+$/i,         // does not match this RegExp
      not: ["^[a-z]+$",'i'],    // same as above, but constructing the RegExp from a string
      isEmail: true,            // checks for email format (foo@bar.com)
      isUrl: true,              // checks for url format (https://foo.com)
      isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format
      isIPv4: true,             // checks for IPv4 (129.89.23.1)
      isIPv6: true,             // checks for IPv6 format
      isAlpha: true,            // will only allow letters
      isAlphanumeric: true,     // will only allow alphanumeric characters, so "_abc" will fail
      isNumeric: true,          // will only allow numbers
      isInt: true,              // checks for valid integers
      isFloat: true,            // checks for valid floating point numbers
      isDecimal: true,          // checks for any numbers
      isLowercase: true,        // checks for lowercase
      isUppercase: true,        // checks for uppercase
      notNull: true,            // won't allow null
      isNull: true,             // only allows null
      notEmpty: true,           // don't allow empty strings
      equals: 'specific value', // only allow a specific value
      contains: 'foo',          // force specific substrings
      notIn: [['foo', 'bar']],  // check the value is not one of these
      isIn: [['foo', 'bar']],   // check the value is one of these
      notContains: 'bar',       // don't allow specific substrings
      len: [2,10],              // only allow values with length between 2 and 10
      isUUID: 4,                // only allow uuids
      isDate: true,             // only allow date strings
      isAfter: "2011-11-05",    // only allow date strings after a specific date
      isBefore: "2011-11-05",   // only allow date strings before a specific date
      max: 23,                  // only allow values <= 23
      min: 23,                  // only allow values >= 23
      isCreditCard: true,       // check for valid credit card numbers

      // Examples of custom validators:
      isEven(value) {
        if (parseInt(value) % 2 !== 0) {
          throw new Error('Only even values are allowed!');
        }
      }
      isGreaterThanOtherField(value) {
        if (parseInt(value) <= parseInt(this.otherField)) {
          throw new Error('Bar must be greater than otherField.');
        }
      }


// Raw Queries
const [results, metadata] = await sequelize.query("UPDATE users SET y = 42 WHERE x = 12");

// Callee is the model definition. This allows you to easily map a query to a predefined model
const projects = await sequelize.query('SELECT * FROM projects', {
  model: Projects,
  mapToModel: true // pass true here if you have any mapped fields
});


// nested dotted
const { QueryTypes } = require('sequelize');
const records = await sequelize.query('select 1 as `foo.bar.baz`', {
  nest: true,
  type: QueryTypes.SELECT
});
console.log(JSON.stringify(records[0], null, 2));


// Replacements
await sequelize.query(
  'SELECT * FROM projects WHERE status = ?',
  {
    replacements: ['active'],
    type: QueryTypes.SELECT
  }
);

await sequelize.query(
  'SELECT * FROM projects WHERE status = :status',
  {
    replacements: { status: 'active' },
    type: QueryTypes.SELECT
  }
);

asccoiataion

RESTRICT (ค่าเริ่มต้น) หมายถึง ไม่สามารถเปลี่ยนแปลง หรือ ลบข้อมูลในคอลัมน์ที่เชื่อมโยง ของตารางแม่ได้เลย
CASCADE หมายถึง เมื่อทำการลบข้อมูลในตารางแม่ จะลบข้อมูลที่เกียวข้องในตารางลูกด้วย
SET NULL หมายถึง เมื่อมีการลบข้อมูลในตารางแม่ ให้เปลี่ยนข้อมูลในคอลัมน์ที่เชื่อมโยงกันในตารางลูกให้เป็น NULL
NO ACTION หมายถึง สามารถลบหรือแก้ไขได้อิสระ ไม่มีการตรวจสอบใดๆ
SET DEFAULT หมายถึง เมื่อมีการลบข้อมูลในตารางแม่ ให้เปลี่ยนข้อมูลในคอลัมน์ที่เชื่อมโยงกันในตารางลูกให้เป็นค่าตามที่กำหนดเป็น DEFAULT

one to one
  hasOne ที่ตารางที่ไม่มี foreign key เรียกว่าตารางแม่
  belongTo ที่ตารางที่มี foreign key เรียกว่าตารางลูก

Foo.hasOne(Bar, {
  onDelete: 'RESTRICT',
  onUpdate: 'RESTRICT'
});
Bar.belongsTo(Foo);

one to Many
  hasMany ที่ตารางที่ไม่มี foreign key เรียกว่าตารางแม่
  belongTo ที่ตารางที่มี foreign key เรียกว่าตารางลูก


Many to Many
Movie.belongsToMany(Actor, { through: 'ActorMovies' }); ใช้ belongsTomany
Actor.belongsToMany(Movie, { through: 'ActorMovies' }); ใช้ belongsTomany
ใช้ตารางเชื่อม
const ActorMovies = sequelize.define('ActorMovies', {
  MovieId: {
    type: DataTypes.INTEGER,
    references: {
      model: Movie, // 'Movies' would also work
      key: 'id'
    }
  },
  ActorId: {
    type: DataTypes.INTEGER,
    references: {
      model: Actor, // 'Actors' would also work
      key: 'id'
    }
  }
});


// การ query เกี่ยวกับตารางที่ join
const Ship = sequelize.define('ship', {
  name: DataTypes.TEXT,
  crewCapacity: DataTypes.INTEGER,
  amountOfSails: DataTypes.INTEGER
}, { timestamps: false });
const Captain = sequelize.define('captain', {
  name: DataTypes.TEXT,
  skillLevel: {
    type: DataTypes.INTEGER,
    validate: { min: 1, max: 10 }
  }
}, { timestamps: false });
Captain.hasOne(Ship);
Ship.belongsTo(Captain);


// ไม่่ต้องเขียน Include ใช้ getShip(); แต่จะช้าเพราะเป็นการ query อีกที
const hisShip = await awesomeCaptain.getShip();

// การเขียน Include คือการใช้ eager loading 
const awesomeCaptain = await Captain.findOne({
  where: {
    name: "Jack Sparrow"
  },
  include: Ship
});

console.log('Ship Name:', awesomeCaptain.ship.name);

// 
has one 
const foo = await Foo.create({ name: 'the-foo' });
const bar1 = await Bar.create({ name: 'some-bar' });
const bar2 = await Bar.create({ name: 'another-bar' });

await foo.setBar(bar1); // การใส่ foreign key ไปในตารางลูก
console.log((await foo.getBar()).name);
await foo.createBar({ name: 'yet-another-bar' });

await foo.setBar(null); // Un-associate
console.log(await foo.getBar()); // null

// has many
const foo = await Foo.create({ name: 'the-foo' });
const bar1 = await Bar.create({ name: 'some-bar' });
const bar2 = await Bar.create({ name: 'another-bar' });

console.log(await foo.getBars()); // []
console.log(await foo.countBars()); // 0
console.log(await foo.hasBar(bar1)); // false เช็คว่าเชื่อมกับตารางลูกนี้ไหม
await foo.addBars([bar1, bar2]); // add ซ้ำก็ไม่เป็นไร

await foo.removeBar(bar2);
await foo.createBar({ name: 'yet-another-bar' });

await foo.setBars([]); // Un-associate all previously associated bars
console.log(await foo.countBars()); // 0

// findall ตารางลูก
const easyTasks = await project.getTasks({
  where: {
    difficulty: {
      [Op.lte]: 5
    }
  }
});
const taskTitles = (await project.getTasks({
  attributes: ['title'],
  raw: true
})).map(task => task.title);


// belonsto สามารถเลือก  targetKey (key ฝั่งตารางแม่) และ foreignKey
Ship.belongsTo(Captain, { targetKey: 'name', foreignKey: 'captainName' });

// hasOne และ hasmany ก็สามารถเลือก sourceKey (key ฝั่งตารางตัวเอง (แม่)) และ foreignKey 
Foo.hasOne(Bar, { sourceKey: 'name', foreignKey: 'fooName' });


// many to many
// เหมือน join ผ่าน attribute ได้หรีอเปล่า
const foo = Foo.findByPk(id, {
  include: [{
    model: Bar,
    through: { attributes: [] }
  }]
})

const foo = Foo.findByPk(id)
console.log(foo.getBars({ joinTableAttributes: [] }))

// join ผ่านตาราง junction ใส่ฟิลด์ตารางฝั่งเรา และอีกฝั่งนึงได้
Foo.belongsToMany(Bar, { through: 'foo_bar',sourceKey: 'name' , targetKey: 'title'  });


// Paranoid คือการ soft delete ข้อดีคือตอน query ไม่ต้องไป where ถ้า soft delete มันจะไม่แสดงขึ้นมา
class Post extends Model {}
Post.init({ /* attributes here */ }, {
  sequelize,
  paranoid: true,

  // If you want to give a custom name to the deletedAt column
  deletedAt: 'destroyTime'
});

แต่ถ้าจะลบจริง ใส่ force: true
await Post.destroy({
  where: {
    id: 1
  },
  force: true
});


ถ้าจะ restore
await post.restore();

// ตอน query
await Post.findByPk(123); // This will return `null` if the record of id 123 is soft-deleted
await Post.findByPk(123, { paranoid: false }); // This will retrieve the record


// Find all projects with a least one task where task.state === project.state
Project.findAll({
  include: {
    model: Task,
    where: {
      state: Sequelize.col('project.state')
    }
  }
})




User.findAll({
  where: {
    '$Instruments.size$': { [Op.ne]: 'small' }
  },
  include: [{
    model: Tool,
    as: 'Instruments'
  }]
});

// Inner where, `required: false`
await User.findAll({
  include: {
    model: Tool,
    as: 'Instruments',
    where: {
      size: { [Op.ne]: 'small' }
    },
    required: false
  }
});

// Top-level where, with default `required: false`
await User.findAll({
  where: {
    '$Instruments.size$': { [Op.ne]: 'small' }
  },
  include: {
    model: Tool,
    as: 'Instruments'
  }
});

// Top-level where, `required: true`
await User.findAll({
  where: {
    '$Instruments.size$': { [Op.ne]: 'small' }
  },
  include: {
    model: Tool,
    as: 'Instruments',
    required: true
  }
});

User.findAll({
  include: [{
    model: Tool,
    where: { name: { [Op.ne]: 'empty trash' } },
    required: false
    right: true // will create a right join
  }]
});

Company.findAll({
  // If the include uses an alias...
  include: { model: Division, as: 'Div' },
  order: [
    // ...we use the same syntax from the include
    // in the beginning of the order array
    [{ model: Division, as: 'Div' }, 'name', 'DESC']
  ]
});

Company.findAll({
  // If we have includes nested in several levels...
  include: {
    model: Division,
    include: Department
  },
  order: [
    // ... we replicate the include chain of interest
    // at the beginning of the order array
    [Division, Department, 'name', 'DESC']
  ]
});

User.findAll({
  include: {
    model: Post,
    separate: true,
    order: [
      ['createdAt', 'DESC']
    ]
  }
});